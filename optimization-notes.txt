
=====================================08/23/21======
List memcpy appears to be inlined in most places, and explodes in terms of code use. Not sure how this performs. We'd probably have to switch to C++ and use templates to get around this problem.

Most calls to astStackPeek() appear to be inlined, with the internal branches amortized. This is probably a big performance improvement.

Perf stat suggests that the Bzo compiler at its current state (partial parser) is roughly on par with clang -O3. Branch mispredicts are biased toward LLVM (3.25% Bzo, 2.30% LLVM).
IPC is decent, though biased slightly toward LLVM (1.18 Bzo, 1.4 LLVM). Branch density is slightly better in Bzo (5.41 Bzo, 4.94 LLVM).

It's important to turn *off* parser debug printing while profiling. The printf statements quickly take up the majority of instructions.


Many of these differences may go away as the later stages of the compiler are built. Typechecking and bytecodegen might be able to be done mostly via array operations.


=====================================08/24/21======
Subparsing can get expensive sometimes - a lot of performance seems to be spent trying to read something as a Build Type when it should be a struct, etc.
