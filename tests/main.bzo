[#module: main]
[#import: io  ]

Vector :: [List: F32]


F32 :: #F32
F64 :: #F64



Mat4 :: [4][4]F32

Foo  :: F32

Binop :: |> [t', t'] -> [t']

Vec3 :: [
	x : F32
	y : F32
	z : F32
]

List :: [t':Num] => [
	xs : []t'
]

Obj :: [
	a : ^ Vec3
	b : []Mat4
	
	|: [req: a != nil]
	|: [req: b.len != 0]
]

Enum :: (I8:
	 5 = X
	-6 = Y
)

Union :: (n I16:
	X : A
	Y : B
)


add :: [n':Num] => [a:n', b:n'] -> [n'] {
	a + b
}


stddev :: [n':Num] => [xs:[]n'] -> [n', n'] {
	|: [req: xs.len > 0]
	avg := [fold: xs, 0, add] / [len:xs]
	dev := [map : xs, [x]{
				(x-avg)^2
			}
			] \ [fold: _, 0, add] / ([len:xs]-1)
	[return: avg, dev]
}


main :: [] -> [] {
	str |: Str
	str := "Hello World!"
	[println: str]
}



