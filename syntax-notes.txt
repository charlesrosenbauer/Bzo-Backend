# New Bzo Syntax

---

Nothing is final right now. This is all just rough sketches.


Operators:
+	add
-	sub
*	mul
/	div
%	mod
^	exp
<	less
>	greater
=<	less/equal
>=	greater/equal
=	equal
!=	not equal
!	not
&	and
|	or
:=	assign
@	namespace

---

Identifiers and Literals:

id		Function/variable identifier
Id		Type/interface identifier
~id		Mutable/effect variable
#id		Builtin identifier

42		integer literal
3.14	float literal
"foo"	string literal
'bar'	tag literal

---

#: this is a comment
#{
	This is a
	multiline comment
#}

---

Function Call
[foo: x, y, z]

Function Pipeline
[foo: w, x] [bar: _, y, z]


---

Function Definition
fn :: [x : Int, y : Int] -> [Int, Int] {
	x + y
}


---

#: if/else chain with code blocks
[?:
	cond? {}
	cond? {}
	_?    {}
]

#: if/else chain with return values
y := [?:
	cond? := {}
	cond? := {}
	_?    := {}
]

#: switch with code blocks
[x?:
	val? {}
	val? {}
	_?   {}
]

#: switch with return values
y := [x?:
	val? := {}
	val? := {}
	_?   := {}
]

---

Enum :: (U8:
	a = 1
	b = 2
	c = 3
)

Union :: (
	a : A
	b : B
	c : C
)

TaggedUnionWithVals :: (tag U8:
	1 = A : X
	2 = B : Y
	3 = C : Z
)

TaggedUnion :: (tag U8:
	A : X
	B : Y
	C : Z
)

---

#: Function types
[U32, U32] -> U32
U32 -> [U32, U32]

#: Type variables
[ []a, a -> b] -> []b
[x:Printable] => [x, x] -> [x, x]

#: Void types
() -> ()


---

#: Constraints on Types
Ty :: [
	x : Int
	y : Int
	z : Int
	.[#tlim: x >  y]
	.[#tlim: y != z]
]

#: Constraints on functions
stddev :: [n:Num] => [xs : []n] -> [n, n] {
	.[#glim: xs len > 0]
	avg := xs sum / xs len
	dev := [map: xs, [x]{(x-avg)^2}] sum sqrt / (xs len - 1)
	avg, dev
}


